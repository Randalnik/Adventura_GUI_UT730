package logika;


import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

/*******************************************************************************
 * Testovací třída ProstorTest slouží ke komplexnímu otestování
 * třídy Prostor
 *
 * @author    Jarmila Pavlíčková
 * @version   pro skolní rok 2015/2016
 */
public class ProstorTest
{
    //== Datové atributy (statické i instancí)======================================

    //== Konstruktory a tovární metody =============================================
    //-- Testovací třída vystačí s prázdným implicitním konstruktorem ----------

    //== Příprava a úklid přípravku ================================================

    /***************************************************************************
     * Metoda se provede před spuštěním každé testovací metody. Používá se
     * k vytvoření tzv. přípravku (fixture), což jsou datové atributy (objekty),
     * s nimiž budou testovací metody pracovat.
     */
    @Before
    public void setUp() {
    }

    /***************************************************************************
     * Úklid po testu - tato metoda se spustí po vykonání každé testovací metody.
     */
    @After
    public void tearDown() {
    }

    //== Soukromé metody používané v testovacích metodách ==========================

    //== Vlastní testovací metody ==================================================

    /**
     * Testuje, zda jsou správně nastaveny průchody mezi prostory hry. Prostory
     * nemusí odpovídat vlastní hře, 
     */
    @Test
    public  void testLzeProjit() {      
        Prostor prostor1 = new Prostor("hala", "vstupní hala budovy VŠE na Jižním městě");
        Prostor prostor2 = new Prostor("bufet", "bufet, kam si můžete zajít na svačinku");
        prostor1.setVychod(prostor2);
        prostor2.setVychod(prostor1);
        assertEquals(prostor2, prostor1.vratSousedniProstor("bufet"));
        assertEquals(null, prostor2.vratSousedniProstor("pokoj"));
    }

    @Test
    public  void testNaVeci() { 
        Vec ostep = new Vec("Oštěp",null, false, true, true, false, null, null, null);
        Vec banany = new Vec("Banány",null, false, true, true, false, null, null, ostep);
        Vec bananovnik = new Vec("Banánovník",null, false, false, false, false, null, null, null);
        
        Prostor prostor1 = new Prostor("hala", "vstupní hala budovy VŠE na Jižním městě");

        prostor1.vlozVec(ostep);
        prostor1.vlozVec(banany);

        assertSame(ostep, prostor1.odeberVec("Oštěp"));        
        assertNull(prostor1.odeberVec("XXX"));
        assertSame(banany, prostor1.ziskejVec("Banány"));
        assertNull(prostor1.ziskejVec("XXX"));   
    }
    
    @Test
    public  void testNaPostavy()
    {
        Postava saman = new Postava("Šaman", "Hej ty! Mám hlad, sežeň mi něco k jídlu a dostaneš oštěp!");
        Postava opice = new Postava("Mluvící opice", "Hu Hu! Umírám žízní, dones mi něco k pití a odměna tě nemine. Vrať se a pak pokecáme.");
        
        Prostor prostor1 = new Prostor("hala", "vstupní hala budovy VŠE na Jižním městě");
        
        prostor1.vlozPostavu(saman);
        prostor1.vlozPostavu(opice);

        assertSame(saman, prostor1.odeberPostavu("Šaman"));        
        assertNull(prostor1.odeberPostavu("želva"));
        assertSame(opice, prostor1.ziskejPostavu("Mluvící opice"));
        assertNull(prostor1.ziskejPostavu("kocour"));
    }
}
